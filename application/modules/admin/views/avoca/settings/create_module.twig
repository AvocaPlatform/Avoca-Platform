{% extends 'layouts/admin.twig' %}

{% block breadcrumbItem %}
    <li class="breadcrumb-item">
        <a href="{{ avoca_admin() }}">{{ 'Admin'|lang }}</a>
    </li>
    <li class="breadcrumb-item">
        <a href="{{ avoca_admin('/settings') }}">{{ 'Settings'|lang }}</a>
    </li>
    <li class="breadcrumb-item">
        <a href="{{ avoca_admin('/settings/modules') }}">{{ 'Modules manage'|lang }}</a>
    </li>
    <li class="breadcrumb-item active">{{ 'Create module'|lang }}</li>
{% endblock %}

{% block content %}
    <div class="row" id="ModuleBuilder" xmlns:v-bind="http://www.w3.org/1999/xhtml"
         xmlns:v-on="http://www.w3.org/1999/xhtml">
        <div class="col-sm-12 mb-4">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link{% if tab == 'ModuleInfo' %} active show{% endif %}"
                       data-toggle="tab"
                       href="#ModuleInfo"
                       role="tab"
                       aria-controls="home"
                       aria-selected="true">
                        <i class="icon-calculator"></i> {{ 'Create module'|lang }}
                        <span class="badge badge-success"><i class="fa fa-flash"></i></span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link{% if tab == 'ModuleFieldInfo' %} active show{% endif %}"
                       data-toggle="tab"
                       href="#ModuleFieldInfo"
                       role="tab"
                       aria-controls="home"
                       aria-selected="true">
                        <i class="icon-calculator"></i> {{ 'Fields'|lang }}
                        <span class="badge badge-success"><i class="fa fa-flash"></i></span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link{% if tab == 'ModuleRelateInfo' %} active show{% endif %}"
                       data-toggle="tab"
                       href="#ModuleRelateInfo"
                       role="tab"
                       aria-controls="home"
                       aria-selected="true">
                        <i class="icon-calculator"></i> {{ 'Relationship'|lang }}
                        <span class="badge badge-success"><i class="fa fa-flash"></i></span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link{% if tab == 'ModuleListView' %} active show{% endif %}"
                       data-toggle="tab"
                       href="#ModuleListView"
                       role="tab"
                       aria-controls="home"
                       aria-selected="true">
                        <i class="icon-calculator"></i> {{ 'List view'|lang }}
                        <span class="badge badge-success"><i class="fa fa-flash"></i></span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link{% if tab == 'ModuleRecordView' %} active show{% endif %}"
                       data-toggle="tab"
                       href="#ModuleRecordView"
                       role="tab"
                       aria-controls="home"
                       aria-selected="true">
                        <i class="icon-calculator"></i> {{ 'Record view'|lang }}
                        <span class="badge badge-success"><i class="fa fa-flash"></i></span>
                    </a>
                </li>
            </ul>

            <div class="tab-content">
                <div class="tab-pane{% if tab == 'ModuleInfo' %} active show{% endif %}" id="ModuleInfo">
                    {{ form_open(avoca_admin('/settings/create_module')) }}
                        <div class="card mb-0">
                            <div class="card-body">
                                <div class="form-group">
                                    <label>{{ 'Module name'|lang }}</label>
                                    {{ form_input('module', module.model, {class: 'form-control'}) }}
                                </div>

                                <div class="form-group">
                                    <label>{{ 'Model name'|lang }}</label>
                                    {{ form_input('model', module.model, {class: 'form-control'}) }}
                                </div>

                                <div class="form-group">
                                    <label>{{ __('Database table') }}</label>
                                    {{ form_input('table', module.table, {class: 'form-control'}) }}
                                </div>
                            </div>
                            <div class="card-footer">
                                <button type="submit" class="btn btn-primary" id="btnCreateModule">{{ __('Create module') }}</button>
                                <a href="{{ avoca_admin('/settings') }}" class="btn btn-link">{{ 'Cancel'|lang }}</a>
                            </div>
                        </div>
                    {{ form_close }}
                </div>

                <div class="tab-pane{% if tab == 'ModuleFieldInfo' %} active show{% endif %}" id="ModuleFieldInfo">
                    {% if not create_module %}
                        <div class="card mb-2">
                            <div class="card-header">
                                {{ 'Fields'|lang }}
                                <div class="card-header-actions">
                                    <button class="card-header-action btn-setting"
                                            @click="editField('')">
                                        {{ 'Add field'|lang }} <i class="fa fa-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <table class="table table-sm table-bordered">
                                    <tr v-for="(extra, field) in moduleData.fields">
                                        <td>
                                            <a href="javascript:void(0)"
                                               v-if="!(field == 'id' || field == 'date_created')"
                                               @click="removeField(field)">
                                                <i class="fa fa-trash text-danger"></i>
                                            </a>
                                            <i class="fa fa-ban text-dark" v-else></i>
                                            <a href="javascript:void(0)" @click="editField(field)">{{ 'field'|ajs }}</a>
                                        </td>
                                        <td>{{ 'extra.type'|ajs }}</td>
                                        <td>{{ 'extra.constraint'|ajs }}</td>
                                    </tr>
                                </table>
                            </div>
                        </div>

                        <div class="card mb-2">
                            <div class="card-header">
                                {{ 'Indexes'|lang }}
                                <div class="card-header-actions">
                                    <button class="card-header-action btn-setting"
                                            @click="editIndex('')">
                                        {{ 'Add index'|lang }} <i class="fa fa-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <table class="table table-sm table-bordered">
                                    <tr v-for="(extra, index_name) in moduleData.indexes">
                                        <td>
                                            <a href="javascript:void(0)"
                                               v-if="index_name != 'primary'"
                                               @click="removeIndex(index_name)">
                                                <i class="fa fa-trash text-danger"></i>
                                            </a>
                                            <i class="fa fa-ban text-dark" v-else></i>
                                            <a href="javascript:void(0)" @click="editIndex(index_name)">{{ 'index_name'|ajs }}</a>
                                        </td>
                                        <td>{{ 'extra.type'|ajs }}</td>
                                        <td>{{ 'extra.fields'|ajs }}</td>
                                    </tr>
                                </table>
                            </div>
                        </div>

                        <div class="mb-0">
                            <button type="button" class="btn btn-primary" @click="saveModule()">{{ 'Update fields'|lang }}</button>
                        </div>
                    {% endif %}
                </div>

                <div class="tab-pane{% if tab == 'ModuleRelateInfo' %} active show{% endif %}" id="ModuleRelateInfo">
                    <button type="button" class="btn btn-secondary" @click="addRelationship()">
                        <i class="fa fa-plus"></i> {{ 'Create relationship'|lang }}
                    </button>
                    <hr>
                    <div class="row">
                        <div class="col-md-4" v-for="(opt, idx) in moduleData.relationships">
                            <div class="card">
                                <div class="card-body">
                                    <div class="form-group">
                                        <label>{{ 'Field relate'|lang }}</label>
                                        <select class="form-control" v-model="opt.field">
                                            <option v-for="(extra, field) in moduleData.fields">{{ '{{ field }}' }}</option>
                                        </select>
                                    </div>

                                    <div class="form-group">
                                        <label>{{ 'Module relate'|lang }}</label>
                                        <select class="form-control" v-model="opt.module" @change="getModuleFields(opt.module, idx)">
                                            <option></option>
                                            {% for module_opt in allModules %}
                                                <option value="{{ module_opt.module }}">{{ module_opt.module }}</option>
                                            {% endfor %}
                                        </select>
                                    </div>

                                    <div class="form-group">
                                        <label>{{ 'Module relate field'|lang }}</label>
                                        <select class="form-control" v-model="opt.rfield">
                                            <option v-for="opt_field in opt.fields" v-bind:value="opt_field">{{ '{{ opt_field }}' }}</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <button type="button" class="btn btn-primary" @click="saveModule()" v-if="moduleData.relationships.length">{{ 'Save relationship'|lang }}</button>
                </div>

                <div class="tab-pane{% if tab == 'ModuleListView' %} active show{% endif %}" id="ModuleListView">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    {{ 'List fields'|lang }}
                                </div>
                                <div class="card-body">
                                    <draggable v-model="list_fields" :options="dragListOptions">
                                        <transition-group name="drag-list" class="dragDrop list-group" tag="ul">
                                            <li class="list-group-item list-group-item-info" v-for="field in list_fields" :key="field.name">
                                                {{ '{{ field.label }}' }}
                                            </li>
                                        </transition-group>
                                    </draggable>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    {{ 'Available fields'|lang }}
                                </div>
                                <div class="card-body">
                                    <draggable v-model="list_choose_fields" :options="dragListOptions">
                                        <transition-group name="drag-list" class="dragDrop list-group" tag="ul">
                                            <li class="list-group-item list-group-item-light" v-for="field in list_choose_fields" :key="field.name">
                                                {{ '{{ field.label }}' }}
                                            </li>
                                        </transition-group>
                                    </draggable>
                                </div>
                            </div>
                        </div>
                    </div>

                    <button type="button" class="btn btn-primary" @click="saveModule()" v-if="list_fields.length">{{ 'Save layout'|lang }}</button>
                </div>

                <div class="tab-pane{% if tab == 'ModuleRecordView' %} active show{% endif %}" id="ModuleRecordView">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="card">
                                <div class="card-header">
                                    {{ 'Record fields'|lang }}
                                    <div class="card-header-actions">
                                        <a href="javascript:void(0)" class="card-header-action btn-setting" @click="addRecordRow()">
                                            <i class="fa fa-plus"></i> {{ 'Add row'|lang }}
                                        </a>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label>{{ 'Field title'|lang }}</label>
                                        <select class="form-control" v-model="record_title">
                                            <option v-for="(extra, field) in moduleData.fields">{{ '{{ field }}' }}</option>
                                        </select>
                                    </div>

                                    <h4 class="mb-4 pb-2 border-bottom">{{ 'View defined'|lang }}</h4>
                                    <div v-for="(line, idx1) in record_fields">
                                        <div class="row">
                                            <div class="col-md-1">
                                                <button type="button"
                                                        class="btn btn-outline-danger pull-right"
                                                        @click="removeRecordRow(idx1)"><i class="fa fa-trash"></i></button>
                                            </div>
                                            <div class="col-md-11">
                                                <div class="row">
                                                    <drop class="col-md-6 mb-2" v-for="(field, idx2) in line" @drop="handleSelectedField">
                                                        <div class="btn-group" role="group" style="width: 100%" v-if="field.name">
                                                            <button type="button"
                                                                    class="btn btn-info btn-block"
                                                                    v-bind:idx1="idx1"
                                                                    v-bind:idx2="idx2"
                                                                    @click="">
                                                                {{ '{{ field.label }}' }}
                                                            </button>
                                                            <button type="button"
                                                                    class="btn btn-danger"
                                                                    v-bind:idx1="idx1"
                                                                    v-bind:idx2="idx2"
                                                                    v-on:click="removeSelectedField"><i class="fa fa-remove"></i></button>
                                                        </div>
                                                        <button type="button" disabled
                                                                class="btn btn-outline-dark btn-block"
                                                                v-if="!field.name"
                                                                v-bind:idx1="idx1"
                                                                v-bind:idx2="idx2">
                                                            {{ 'Drop here'|lang }}
                                                        </button>
                                                    </drop>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    {{ 'Available fields'|lang }}
                                </div>
                                <div class="card-body">
                                    <div class="" v-for="field in record_choose_fields">
                                        <drag class="mb-2" :transfer-data="field">
                                            <button type="button" class="btn btn-light btn-block">
                                                {{ '{{ field.label }}' }}
                                            </button>
                                        </drag>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <button type="button" class="btn btn-primary" @click="saveModule()" v-if="record_fields.length">{{ 'Save layout'|lang }}</button>
                </div>

            </div>
        </div>

        <div class="col-sm-12 mb-4" v-if="module_created == 0">
            <button type="button"
                    class="btn btn-danger btn-block"
                    @click="deploy()">{{ 'Deploy module'|lang }}</button>
        </div>

        <!-- Model create/update field -->
        <div class="modal fade"
             id="fieldConfigModal"
             tabindex="-1"
             role="dialog"
             aria-labelledby="fieldConfigModalLabel"
             aria-hidden="true"
             data-backdrop="static">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">{{ 'Create field' }}</h4>
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>{{ 'Field type'|lang }}</label>
                            <select class="form-control" v-model="newField.type" @change="changeType()">
                                <option></option>
                                <option v-for="type in fieldTypes" v-bind:value="type">{{ 'type'|ajs }}</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>{{ 'Field name'|lang }}</label>
                            <input type="text" name="field_name" class="form-control" v-model="newField.name">
                        </div>

                        <div class="form-group">
                            <label>{{ 'Field label'|lang }}</label>
                            <input type="text" name="field_label" class="form-control" v-model="newField.label">
                        </div>

                        <div class="form-group" v-if="isLength">
                            <label>{{ 'Length'|lang }}</label>
                            <input type="number" name="field_length" class="form-control" v-model="newField.constraint">
                        </div>

                        <div class="form-group" v-if="isDecimal">
                            <label>{{ 'Decimal'|lang }}</label>
                            <input type="number" name="field_decimal" class="form-control" v-model="newField.decimal">
                        </div>

                        <div class="form-group" v-if="isOptions">
                            <label class="col-form-label">{{ 'Options'|lang }}</label>
                            <div class="controls">
                                <div class="input-group">
                                    <select class="form-control" v-model="newField.options">
                                        <option></option>
                                        <option v-for="(strings, key) in allOptions" v-bind:value="key">{{ '{{ key }}' }}</option>
                                    </select>
                                    <span class="input-group-append">
                                        <button class="btn btn-secondary" type="button" v-if="!newField.options" @click="editListStrings('')">Create</button>
                                        <button class="btn btn-secondary" type="button" v-if="newField.options" @click="editListStrings(newField.options)">Edit</button>
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class="form-group" v-if="isRelate">
                            <label>{{ 'Module relate'|lang }}</label>
                            <select class="form-control" v-model="newField.relate">
                                {% for module_opt in allModules %}
                                    <option value="{{ module_opt.module }}">{{ module_opt.module }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" data-dismiss="modal">{{ 'Close'|lang }}</button>
                        <button class="btn btn-primary" type="button" @click="addField()">{{ 'Add field'|lang }}</button>
                    </div>
                </div>
                <!-- /.modal-content-->
            </div>
            <!-- /.modal-dialog-->
        </div>

        <!-- Model create/update index -->
        <div class="modal fade"
             id="indexConfigModal"
             tabindex="-1"
             role="dialog"
             aria-labelledby="indexConfigModalLabel"
             aria-hidden="true"
             data-backdrop="static">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">{{ 'Create index' }}</h4>
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>{{ 'Index name' }}</label>
                            <input type="text" class="form-control" v-model="newIndex.name">
                        </div>

                        <div class="form-group">
                            <label>{{ 'Index type' }}</label>
                            <select class="form-control" v-model="newIndex.type">
                                <option v-for="index in indexTypes" v-bind:value="index">{{ 'index'|ajs }}</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>{{ 'Index fields' }}</label>
                            <select class="form-control" multiple v-model="newIndex.fields">
                                <option v-for="(extra, field) in moduleData.fields" v-bind:value="field">{{ 'field'|ajs }}</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" data-dismiss="modal">{{ 'Close'|lang }}</button>
                        <button class="btn btn-primary" type="button" @click="addIndex()">{{ 'Add index'|lang }}</button>
                    </div>
                </div>
                <!-- /.modal-content-->
            </div>
            <!-- /.modal-dialog-->
        </div>

        <!-- Model create/update list strings -->
        <div class="modal fade"
             id="listStringsModal"
             tabindex="-1"
             role="dialog"
             aria-labelledby="listStringsModalLabel"
             aria-hidden="true"
             data-backdrop="static">
             <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" v-if="options.create">{{ 'Create dropdown list'|lang }}</h4>
                        <h4 class="modal-title" v-if="!options.create">{{ 'Update'|lang }}: {{ '{{ options.name }}' }}</h4>
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group" v-if="options.create">
                            <input type="text" class="form-control" placeholder="{{ 'List string name'|lang }}" v-model="options.name">
                        </div>

                        <table class="table table-sm table-bordered">
                            <thead>
                            <tr>
                                <th>{{ 'Value'|lang }}</th>
                                <th>{{ 'Text'|lang }}</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr v-for="(text, string) in options.value">
                                <td>{{ '{{ string }}' }}</td>
                                <td>{{ '{{ text }}' }}</td>
                            </tr>
                            </tbody>
                        </table>

                        <div class="input-group">
                            <input class="form-control" type="text" v-model="option.string" placeholder="{{ 'Value'|lang }}">
                            <input class="form-control" type="text" v-model="option.text" placeholder="{{ 'Text'|lang }}">
                            <span class="input-group-prepend">
                                <button class="btn btn-secondary" type="button" @click="addDropdown()">
                                    <i class="fa fa-send"></i> Add
                                </button>
                            </span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" data-dismiss="modal">{{ 'Close'|lang }}</button>
                        <button class="btn btn-primary" type="button" @click="saveDropdown()">{{ 'Save'|lang }}</button>
                    </div>
                </div>
                <!-- /.modal-content-->
            </div>
            <!-- /.modal-dialog-->
        </div>
    </div>
{% endblock %}

{% block jsLive %}
    <script>
        var viewdefs = {{ viewdefs|json_encode|raw }};

        $(function () {

        });

        new Vue({
            el: '#ModuleBuilder',
            data: {
                module_created: {{ module_created }},
                moduleData: {{ module|json_encode|raw }},
                fieldTypes: {{ types|json_encode|raw }},

                newField: {},
                newIndex: {},

                isLength: true,
                isDecimal: false,
                isOptions: false,
                isRelate: false,

                indexTypes: ['INDEX', 'UNIQUE', 'PK'],
                allOptions: {{ app_list_strings|json_encode|raw }},

                option: {},
                options: {
                    create: true,
                    name: '',
                    value: {}
                },

                list_fields: viewdefs.list && viewdefs.list.fields && Object.values(viewdefs.list.fields) || [],
                list_choose_fields: {{ all_fields|json_encode|raw }},

                record_title: viewdefs.title || '',
                record_fields: viewdefs.record && viewdefs.record.fields && Object.values(viewdefs.record.fields) || [[{name: '', label: ''}, {name: '', label: ''}]],
                record_choose_fields: {{ all_fields|json_encode|raw }},
            },
            created: function () {
                if (this.moduleData.relationships) {
                    if (!Array.isArray(this.moduleData.relationships)) {
                        this.moduleData.relationships = Object.values(this.moduleData.relationships);
                    }
                }
                // list_choose_fields
                _.forEach(this.list_fields, (field, key) => {
                    let field_name = field.name || '';
                    if (field_name) {
                        let choose_idx = _.findIndex(this.list_choose_fields, {name: field_name});
                        this.list_choose_fields.splice(choose_idx, 1);
                    }
                });
                // record_choose_fields
                _.forEach(this.record_fields, (line, key0) => {
                    _.forEach(line, (field, key1) => {
                        let field_name = field.name || '';
                        if (field_name) {
                            let choose_idx = _.findIndex(this.record_choose_fields, {name: field_name});
                            this.record_choose_fields.splice(choose_idx, 1);
                        }
                    });
                });
            },
            computed: {
                dragListOptions() {
                    return {
                        animation: 0,
                        group: 'listview',
                        ghostClass: 'drag-ghost',
                    };
                },
                dragRecordOptions() {
                    return {
                        animation: 0,
                        group: 'recordview',
                        ghostClass: 'drag-ghost',
                    };
                }
            },
            methods: {
                hideOptions() {
                    this.isLength = false;
                    this.isDecimal = false;
                    this.isOptions = false;
                    this.isRelate = false;
                },

                defaultOptions() {
                    this.hideOptions();
                    this.isLength = true;
                },

                changeType() {
                    let change = false;

                    if (['id', 'num', 'date', 'datetime'].includes(this.newField.type)) {
                        change = true;
                        this.hideOptions();
                    }

                    if (['float', 'double'].includes(this.newField.type)) {
                        change = true;
                        this.hideOptions();
                        this.isLength = true;
                        this.isDecimal = true;
                    }

                    if (['enum', 'multinum'].includes(this.newField.type)) {
                        change = true;
                        this.hideOptions();
                        this.isOptions = true;
                    }

                    if (['relate'].includes(this.newField.type)) {
                        change = true;
                        this.hideOptions();
                        this.isRelate = true;
                    }

                    if (change === false) {
                        this.defaultOptions();
                    }
                },

                addField() {
                    if (this.newField.type && this.newField.name && this.newField.label) {
                        let newField = {...this.newField};
                        this.moduleData.fields[this.newField.name] = newField;
                        this.newField = {};
                        $('#fieldConfigModal').modal('hide');
                    }
                },

                editField(field) {
                    if (field && this.moduleData.fields && this.moduleData.fields[field]) {
                        this.newField = this.moduleData.fields[field];
                    } else {
                        this.newField = {};
                    }

                    $('#fieldConfigModal').modal('show');
                },

                removeField(field) {
                    if (field && this.moduleData.fields && this.moduleData.fields[field]) {
                        this.$delete(this.moduleData.fields, field);
                    }
                },

                editListStrings(name = '') {
                    this.options.create = true;
                    if (name) {
                        this.options.create = false;
                        const url = admin_url + 'settings/edit_list_strings/' + name + '?ajax=1';
                        this.$http.get(url).then(response => {
                            const data = response.body;
                            this.options.name = data.string;
                            this.options.value = data.list_strings;
                            $('#listStringsModal').modal();
                        }, error => {
                            console.log(error);
                            avocaAlert('Error', 'Some error. Please contact with administrator!');
                        });
                    } else {
                        $('#listStringsModal').modal();
                    }
                },

                addDropdown() {
                    if (this.option.string && this.option.text) {
                        const option = {...this.option};
                        this.options.value[option.string] = option.text;
                        this.option = {};
                    }
                },

                saveDropdown() {
                    if (this.options.name) {
                        const url = admin_url + 'settings/save_list_strings';
                        this.$http.post(url, this.options).then(response => {
                            const data = response.body;
                            if (data.error == 0) {
                                this.allOptions[this.options.name] = this.options.value;
                                this.newField.options = this.options.name;
                                this.options = {
                                    create: true,
                                    name: '',
                                    value: {}
                                };

                                $('#listStringsModal').modal('hide');
                            }
                        }, error => {
                            console.log(error);
                            avocaAlert('Error', 'Some error. Please contact with administrator!');
                        });
                    }
                },

                addIndex() {
                    if (this.newIndex.type && this.newIndex.name && this.newIndex.fields) {
                        let newIndex = {...this.newIndex};
                        this.moduleData.indexes[this.newIndex.name] = newIndex;
                        this.newIndex = {};
                        $('#indexConfigModal').modal('hide');
                    }
                },

                editIndex(index) {
                    if (index && this.moduleData.indexes && this.moduleData.indexes[index]) {
                        this.newIndex = this.moduleData.indexes[index];
                        this.newIndex.name = index;
                    } else {
                        this.newIndex = {};
                    }

                    $('#indexConfigModal').modal('show');
                },

                removeIndex(index) {
                    if (index && this.moduleData.indexes && this.moduleData.indexes[index]) {
                        this.$delete(this.moduleData.indexes, index);
                    }
                },

                addRelationship() {
                    this.moduleData.relationships.push({
                        field: '',
                        module: '',
                        rfield: '',
                        fields: []
                    });
                },

                getModuleFields(module, idx) {
                    this.$http.get(admin_url + 'settings/module_fields/' + module).then(
                        response => {
                            const res = response.body;
                            if (res.error == 0) {
                                this.moduleData.relationships[idx].fields = res.fields;
                            } else {
                                avocaAlert('Error', 'Can not found this module!');
                            }
                        },
                        error => {
                            console.log(error);
                            avocaAlert('Error', 'Some error. Please contact with administrator!');
                        }
                    )
                },

                handleSelectedField(data, event) {
                    const el = event.target;
                    const idx1 = $(el).attr('idx1');
                    const idx2 = $(el).attr('idx2');

                    this.record_fields[idx1][idx2] = data;
                    const chooseIdx = _.findIndex(this.record_choose_fields, {name: data.name, label: data.label});
                    if (chooseIdx >= 0) {
                        this.record_choose_fields.splice(chooseIdx, 1);
                    }

                    $(el).text(data.label);
                    $(el).attr('disabled', false);
                    $(el).removeClass('btn-outline-dark');
                    $(el).addClass('btn-info');
                },

                removeSelectedField(event) {
                    const el = event.target;
                    const idx1 = $(el).attr('idx1');
                    const idx2 = $(el).attr('idx2');

                    this.record_choose_fields.push(this.record_fields[idx1][idx2]);
                    this.record_fields[idx1][idx2] = {name: '', label: ''};

                    $(el).text('Drop here');
                    $(el).attr('disabled', true);
                    $(el).addClass('btn-outline-dark');
                    $(el).removeClass('btn-info');
                },

                addRecordRow() {
                    this.record_fields.push([{name: '', label: ''}, {name: '', label: ''}]);
                },

                removeRecordRow(idx) {
                    const fields = [...this.record_fields[idx]];
                    for (let i in fields) {
                        let field = fields[i];
                        this.record_choose_fields.push(field);
                    }

                    this.record_fields.splice(idx, 1);
                },

                saveModule() {
                    this.$http.post(admin_url + 'settings/build_module', {
                        data: this.moduleData,
                        list_view: this.list_fields,
                        record_view: this.record_fields,
                        field_title: this.record_title
                    }).then(
                        response => {
                            const res = response.body;
                            if (res.error == 0) {
                                avocaAlert('Successful', 'Save successful!');
                            } else {
                                avocaAlert('Error', 'Some error. Please contact with administrator!');
                            }
                        },
                        error => {
                            console.log(error);
                            avocaAlert('Error', 'Some error. Please contact with administrator!');
                        }
                    );
                },

                deploy() {
                    if (!this.module_created) {
                        this.$http.post(admin_url + 'settings/deploy_module', {module: this.moduleData.module || ''}).then(
                            response => {
                                const res = response.body;
                                if (res.error == 0) {
                                    avocaAlert('Success', 'Deploy success');
                                } else {
                                    avocaAlert('Error', 'Some error. Please contact with administrator!');
                                }
                            },
                            error => {
                                console.log(error);
                                avocaAlert('Error', 'Some error. Please contact with administrator!');
                            }
                        )
                    }
                },
            }
        });
    </script>
{% endblock %}
